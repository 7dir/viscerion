apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
final def keystorePropertiesFile = rootProject.file("keystore.properties")

final def gitHash = { ->
    if (System.getenv("WITH_MAINFRAMER") == "true" ||
            System.getenv("TRAVIS") == "true") {
        "TEST"
    } else {
        final def stdout = new ByteArrayOutputStream()
        exec {
            commandLine 'git', 'describe', '--tags'
            standardOutput = stdout
        }
        stdout.toString().trim()
    }
}

android {
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
        kotlinOptions {
            jvmTarget = "1.8"
        }
    }
    compileSdkVersion 28
    dataBinding.enabled true
    android.applicationVariants.all { final variant ->
        variant.outputs.all {
            outputFileName = "wg-android_${gitHash()}.apk"
        }
    }
    defaultConfig {
        applicationId 'me.msfjarvis.wgandroid'
        minSdkVersion 21
        targetSdkVersion 28
        versionCode 530
        versionName '0.0.20181130'
        buildConfigField 'int', 'MIN_SDK_VERSION', "$minSdkVersion.apiLevel"
    }
    // If the keystore file exists
    if (keystorePropertiesFile.exists()) {
        // Initialize a new Properties() object called keystoreProperties.
        final def keystoreProperties = new Properties()

        // Load your keystore.properties file into the keystoreProperties object.
        keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

        signingConfigs {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }
    buildTypes {
        release {
            if (keystorePropertiesFile.exists()) signingConfig signingConfigs.release
            externalNativeBuild {
                cmake {
                    arguments "-DANDROID_PACKAGE_NAME=${android.defaultConfig.applicationId}"
                }
            }
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
        debug {
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
            externalNativeBuild {
                cmake {
                    arguments "-DANDROID_PACKAGE_NAME=${android.defaultConfig.applicationId}${applicationIdSuffix}"
                }
            }
            minifyEnabled false
        }
    }
    externalNativeBuild {
        cmake {
            path 'tools/CMakeLists.txt'
        }
    }
    lintOptions.abortOnError false
}

dependencies {
    implementation "androidx.annotation:annotation:1.0.0"
    implementation "androidx.appcompat:appcompat:1.0.2"
    implementation "androidx.cardview:cardview:1.0.0"
    implementation "androidx.core:core-ktx:1.0.1"
    implementation "androidx.databinding:databinding-adapters:3.2.1"
    implementation "androidx.databinding:databinding-runtime:3.2.1"
    implementation "androidx.fragment:fragment-ktx:1.0.0"
    implementation "androidx.preference:preference:1.0.0"
    implementation "com.google.android.material:material:1.0.0"
    implementation "com.jakewharton.timber:timber:4.7.1"
    implementation "com.journeyapps:zxing-android-embedded:3.6.0"
    implementation "net.sourceforge.streamsupport:android-retrofuture:1.6.0"
    implementation "net.sourceforge.streamsupport:android-retrostreams:1.6.0"
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:1.3.10"
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:unchecked'
    options.deprecation = true
}

repositories {
    mavenCentral()
}
